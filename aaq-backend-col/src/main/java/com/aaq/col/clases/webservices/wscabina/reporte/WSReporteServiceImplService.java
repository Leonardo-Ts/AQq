package com.aaq.col.clases.webservices.wscabina.reporte;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.Properties;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

@SuppressWarnings("all")
/**
 * This class was generated by Apache CXF 3.0.0
 * 2014-06-25T12:51:56.673-05:00
 * Generated source version: 3.0.0
 * 
 */
@WebServiceClient(name = "WSReporteServiceImplService",  targetNamespace = "http://webservicesImpl.ws.cabina.qualitas.com/")
public class WSReporteServiceImplService extends Service {

	public static ApplicationContext context = new ClassPathXmlApplicationContext("config\\spring\\spring-configuracion.xml");
    static Properties parametros = (Properties) context.getBean("parametros");

	
	public final static URL WSDL_LOCATION;

	public final static QName SERVICE = new QName(parametros.getProperty("qname.reporte.service"),
			"WSReporteServiceImplService");

	public final static QName WSReporteServiceImplPort = new QName(parametros.getProperty("qname.reporte.service"),
			"WSReporteServiceImplPort");
	static {
		URL url = null;
		try {
			url = new URL(parametros.getProperty("url.reporte.service"));
		} catch (final MalformedURLException e) {
			java.util.logging.Logger.getLogger(WSReporteServiceImplService.class.getName()).log(
					java.util.logging.Level.INFO, "Can not initialize the default wsdl from {0}",
					parametros.getProperty("url.reporte.service"));
		}
		WSDL_LOCATION = url;
	}

	public WSReporteServiceImplService(final URL wsdlLocation) {
		super(wsdlLocation, WSReporteServiceImplService.SERVICE);
	}

	public WSReporteServiceImplService(final URL wsdlLocation, final QName serviceName) {
		super(wsdlLocation, serviceName);
	}

	public WSReporteServiceImplService() {
		super(WSReporteServiceImplService.WSDL_LOCATION, WSReporteServiceImplService.SERVICE);
	}

	// This constructor requires JAX-WS API 2.2. You will need to endorse the
	// 2.2
	// API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS
	// 2.1
	// compliant code instead.
	public WSReporteServiceImplService(final WebServiceFeature... features) {
		super(WSReporteServiceImplService.WSDL_LOCATION, WSReporteServiceImplService.SERVICE, features);
	}

	// This constructor requires JAX-WS API 2.2. You will need to endorse the
	// 2.2
	// API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS
	// 2.1
	// compliant code instead.
	public WSReporteServiceImplService(final URL wsdlLocation, final WebServiceFeature... features) {
		super(wsdlLocation, WSReporteServiceImplService.SERVICE, features);
	}

	// This constructor requires JAX-WS API 2.2. You will need to endorse the
	// 2.2
	// API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS
	// 2.1
	// compliant code instead.
	public WSReporteServiceImplService(final URL wsdlLocation, final QName serviceName,
			final WebServiceFeature... features) {
		super(wsdlLocation, serviceName, features);
	}

	/**
	 * @return returns WSReporteService
	 */
	@WebEndpoint(name = "WSReporteServiceImplPort")
	public WSReporteService getWSReporteServiceImplPort() {
		return super.getPort(WSReporteServiceImplService.WSReporteServiceImplPort, WSReporteService.class);
	}

	/**
	 * @param features
	 *            A list of {@link javax.xml.ws.WebServiceFeature} to configure
	 *            on the proxy. Supported features not in the
	 *            <code>features</code> parameter will have their default
	 *            values.
	 * @return returns WSReporteService
	 */
	@WebEndpoint(name = "WSReporteServiceImplPort")
	public WSReporteService getWSReporteServiceImplPort(final WebServiceFeature... features) {
		return super.getPort(WSReporteServiceImplService.WSReporteServiceImplPort, WSReporteService.class, features);
	}

}
